// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ruyicai.actioncenter.domain;

import com.ruyicai.actioncenter.domain.UserExperienceMobile;
import java.lang.String;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect UserExperienceMobile_Roo_Entity {
    
    declare @type: UserExperienceMobile: @Entity;
    
    declare @type: UserExperienceMobile: @Table(name = "USEREXPERIENCEMOBILE");
    
    @PersistenceContext
    transient EntityManager UserExperienceMobile.entityManager;
    
    @Transactional
    public void UserExperienceMobile.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void UserExperienceMobile.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            UserExperienceMobile attached = UserExperienceMobile.findUserExperienceMobile(this.mobileid);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void UserExperienceMobile.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void UserExperienceMobile.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public UserExperienceMobile UserExperienceMobile.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        UserExperienceMobile merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager UserExperienceMobile.entityManager() {
        EntityManager em = new UserExperienceMobile().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long UserExperienceMobile.countUserExperienceMobiles() {
        return entityManager().createQuery("SELECT COUNT(o) FROM UserExperienceMobile o", Long.class).getSingleResult();
    }
    
    public static List<UserExperienceMobile> UserExperienceMobile.findAllUserExperienceMobiles() {
        return entityManager().createQuery("SELECT o FROM UserExperienceMobile o", UserExperienceMobile.class).getResultList();
    }
    
    public static UserExperienceMobile UserExperienceMobile.findUserExperienceMobile(String mobileid) {
        if (mobileid == null || mobileid.length() == 0) return null;
        return entityManager().find(UserExperienceMobile.class, mobileid);
    }
    
    public static List<UserExperienceMobile> UserExperienceMobile.findUserExperienceMobileEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM UserExperienceMobile o", UserExperienceMobile.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
